so i have  three levers
placement
relationship
overall frequency

order of 'choosing' operations
 
start with a seed bigram based on overall frequency - 
In [175]: large_arr[int(0.05 * len(large_arr))] # 5% quantile Out[175]: -1.5791023260896004

here are the top word size number of bigrams that 
appear with this bigram

rank based on position proportions

create nouns, verbs and adjectives
I can mix and match made up and real words


'er' 'aa' 534
	 'ab' 643
	 'ac' 76

'er' .0235

'er' 'early' .05
	 'mid'	 .75
	 'late'  .15
	 'end'	 .05


### Unused code
# sorted_ncombos = sorted(ncombos.iteritems(), key=operator.itemgetter(1), reverse=True)
# cumsum = 0;
# for i in range(len(sorted_ncombos)):
# 	cumsum += sorted_ncombos[i][1]
# 	sorted_ncombos[i] += (cumsum, )

# max(sorted_ncombos, key=operator.itemgetter(2))[2]	

# #a separate attempt at figuring out how to choice from the list of bigram frequencies
# x = ncombos.items()
# dt = np.dtype([('bigram', np.str_, 2), ('matches', np.float64, 1)])
# ncombos_array = np.asarray(x, dtype=dt)
# ncombos_array.sort(order ='matches')
# y = np.cumsum(ncombos_array['matches'])

#add up the total number of matches for some math!
total_matches = 0.0
most_matches = 0
winner = ''
for c, m in ncombos.iteritems():
	total_matches += m
	if m > most_matches:
		most_matches = m
		winner = c


#calculate frequency combos appear and weed out combos that are negligble
modeList = list()
mean = 0
count = 0
for c in ncombos.iterkeys():
	 x = ncombos[c]/total_matches
	 if x > absurdity:				#absurdity is how low the frequency needs to be for the bigram to qualify
	 	mean += x
	 	count += 1
	 	nprops[c] = x
	 	modeList.append(x)

#sort nprops

sorted_nprops = sorted(nprops.iteritems(), key=operator.itemgetter(1), reverse=True)


#determine mode and mean
data = Counter(modeList)
mode = data.most_common(1)
mean = mean/count


sum_of_sqdiffs = 0.0
sum_of_qdiffs = 0.0
for prop in nprops.itervalues():
	sum_of_sqdiffs = sum_of_sqdiffs + (prop - mean)**2
	sum_of_qdiffs = sum_of_qdiffs + (prop-mean)**4 

alpha = (sum_of_qdiffs/count)/((sum_of_sqdiffs/count)**2)-2 #KURTOSIS, aka shape of the curve
stddev =(sum_of_sqdiffs/count)**(1/2) #standard deviation

	# for i in range(len(sorted_ncombos)):
	# 	if chooser < sorted_ncombos[i][2]:
	# 		seeder = sorted_ncombos[i][0]
	# 	chooser -= sorted_ncombos[i][2]
	
	# for l in range(len_of_newWord):
	# 	#old pareto variate method - chooser = mode[0][0]*random.paretovariate(alpha)
	# 	#print chooser
	# 	winRange = 1
	# 	winner = ""
	# 	for c in nprops.iterkeys():
	# 		compare = abs((nprops[c] - chooser))
	# 		if compare < winRange:
	# 			winner = c
	# 			winRange = compare
	# 	#print winner
	# 	newWord += winner
	# newWords.append(newWord)
